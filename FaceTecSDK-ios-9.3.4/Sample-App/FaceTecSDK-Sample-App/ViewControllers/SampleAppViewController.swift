// Welcome to the FaceTec Sample App
// This sample demonstrates Initialization, Liveness Check, Enrollment, Authentication, Photo ID Match, Customizing the UX, and Getting Audit Trail Images.
// Please use our technical support form to submit questions and issue reports:  https://dev.facetec.com/#/

import UIKit
import FaceTecSDK
import LocalAuthentication

class SampleAppViewController: UIViewController, URLSessionDelegate {
    var latestSessionResult: FaceTecSessionResult!
    var latestIDScanResult: FaceTecIDScanResult!
    var utils: SampleAppUtilities!
    var latestProcessor: Processor!
    var latestExternalDatabaseRefID: String = ""
    var latestServerResult: [String: AnyObject]!
    
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet weak var mainInterfaceStackView: UIStackView!
    @IBOutlet weak var livenessButton: SampleAppActionButton!
    @IBOutlet weak var enrollUserButton: SampleAppActionButton!
    @IBOutlet weak var authenticateUserButton: SampleAppActionButton!
    @IBOutlet weak var photoIDMatchButton: SampleAppActionButton!
    @IBOutlet weak var auditTrailButton: SampleAppActionButton!
    @IBOutlet weak var themesButton: SampleAppActionButton!
    @IBOutlet weak var themeTransitionImageView: UIImageView!
    @IBOutlet weak var themeTransitionText: UILabel!
    @IBOutlet weak var vocalGuidanceSettingButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Configure initial look and feel of the Sample App
        utils = SampleAppUtilities(vc: self)
        
        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                self.utils.enableButtons(shouldEnable: true)
            }
            
            // Displays the FaceTec SDK Status to text field.
            self.utils.displayStatus(statusString: "\(FaceTec.sdk.description(for: FaceTec.sdk.getStatus()))")
        })
        
        // Set your FaceTec Device SDK Customizations.
        ThemeHelpers.setAppTheme(theme: utils.currentTheme)
        
        // Set the sound files that are to be used for Vocal Guidance.
        SampleAppUtilities.setVocalGuidanceSoundFiles()
        utils.setUpVocalGuidancePlayers()
        
        // Set the strings to be used for group names, field names, and placeholder texts for the FaceTec ID Scan User OCR Confirmation Screen.
        SampleAppUtilities.setOCRLocalization()
    }
    
    // Initiate a 3D Liveness Check.
    @IBAction func onLivenessCheckPressed(_ sender: Any) {
        utils.fadeOutMainUIAndPrepareForFaceTecSDK()
        
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        getSessionToken() { sessionToken in
            self.latestProcessor = LivenessCheckProcessor(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    // Initiate a 3D Liveness Check, then storing the 3D FaceMap in the Database, also known as "Enrollment".  A random externalDatabaseRefID is generated each time to guarantee uniqueness.
    @IBAction func onEnrollUserPressed(_ sender: Any) {
        utils.fadeOutMainUIAndPrepareForFaceTecSDK()
        
        // Get a Session Token from the FaceTec SDK, then start the Enrollment.
        getSessionToken() { sessionToken in
            self.latestExternalDatabaseRefID = "ios_sample_app_" + UUID().uuidString
            self.latestProcessor = EnrollmentProcessor(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    // Perform 3D to 3D Authentication against the Enrollment previously performed.
    @IBAction func onAuthenticateUserPressed(_ sender: Any) {
        // For demonstration purposes, verify that we have an externalDatabaseRefID to Authenticate against.
        if latestExternalDatabaseRefID.count == 0 {
            utils.displayStatus(statusString: "Please enroll first before trying authentication.")
            return
        }
        
        utils.fadeOutMainUIAndPrepareForFaceTecSDK()
        
        // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.
        getSessionToken() { sessionToken in
            self.latestProcessor = AuthenticateProcessor(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    // Perform a 3D Liveness Check, then an ID Scan, then Match the 3D FaceMap to the ID Scan.
    @IBAction func onPhotoIDMatchPressed(_ sender: Any) {
        utils.fadeOutMainUIAndPrepareForFaceTecSDK()
        
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken() { sessionToken in
            self.latestExternalDatabaseRefID = "ios_sample_app_" + UUID().uuidString
            self.latestProcessor = PhotoIDScanProcessor(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    // When the FaceTec SDK is completely done, you receive control back here.
    // Since you have already handled all results in your Processor code, how you proceed here is up to you and how your App works.
    // In general, there was either a Success, or there was some other case where you cancelled out.
    func onComplete() {
        self.utils.fadeInMainUI()
        
        if self.latestProcessor.isSuccess() {
            self.utils.displayStatus(statusString: "Success")
        }
        else {
            // Show early exit message to screen.  If this occurs, please check logs.
            self.utils.displayStatus(statusString: "Session exited early, see logs for more details.")
            
            // Reset the enrollment identifier.
            self.latestExternalDatabaseRefID = "";
        }
    }
    
    // Display audit trail images captured from user's last session (if available).
    @IBAction func onAuditTrailButtonPressed(_ sender: Any) {
        utils.showAuditTrailImages()
    }
    
    // Present settings action sheet, allowing user to select a new app theme (pre-made FaceTecCustomization configuration).
    @IBAction func onThemesPressed(_ sender: Any) {
        utils.showThemeSelectionMenu()
    }

    @IBAction func onVocalGuidanceSettingButtonPressed(_ sender: Any) {
        utils.setVocalGuidanceMode()
    }
    
    //
    // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest session results.
    // In your code, you may not even want or need to do this.
    //
    func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
        latestSessionResult = sessionResult
    }
    
    func setLatestIDScanResult(idScanResult: FaceTecIDScanResult) {
        latestIDScanResult = idScanResult
    }
    
    func getLatestExternalDatabaseRefID() -> String {
        return latestExternalDatabaseRefID;
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        utils.startSessionTokenConnectionTextTimer();
        
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        
        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call.")
                self.utils.handleErrorGettingServerSessionToken()
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil)
                {
                    self.utils.hideSessionTokenConnectionText()
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                }
                else {
                    print("Exception raised while attempting HTTPS call.")
                    self.utils.handleErrorGettingServerSessionToken()
                }
            }
        })
        task.resume()
    }
}
